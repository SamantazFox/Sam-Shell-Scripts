#!/bin/sh

#
# Distro name
#

# Ubuntu / Debian
if [ -e /etc/lsb-release ]; then
	. /etc/lsb-release
	distro="$DISTRIB_ID $DISTRIB_RELEASE $DISTRIB_CODENAME"

# Fedora / CentOS / Arch Linux / Manjaroo
elif [ -e /etc/os-release ]; then
	. /etc/os-release
	distro="${PRETTY_NAME:-$NAME}"

# RedHat
elif [ -e /etc/redhat-release ]; then distro=$(cat /etc/redhat-release)

# Fallback
else
	distro="Linux generic"
fi


#
# Kernel / Memory / CPU details
#

_old_IFS=$IFS
IFS=$'\n'

# Kernel version
kernel="$(uname -m) $(uname -sr)"


# Memory informations
meminfo=( $(sed -nE '
	s/MemTotal:\s+([0-9]+) kB/\1/p
	s/MemAvailable:\s+([0-9]+) kB/\1/p
' /proc/meminfo) )

mem_total_kib="${meminfo[1]}"
mem_total_mib=$(( $mem_total_kib / 1024 ))

mem_avail_kib="${meminfo[2]}"
mem_avail_mib=$(( $mem_avail_kib / 1024 ))

mem_used_kib=$(( $mem_total_kib - $mem_avail_kib ))
mem_used_mib=$(( $mem_used_kib / 1024 ))



# CPU informations
cpuinfo=( $(lscpu | sed -nE '
	s/^CPU\(s\):\s+([0-9]+)$/\1/p
	s/^Core\(s\) per socket:\s+([0-9]+)$/\1/p
	s/^Socket\(s\):\s+([0-9]+)$/\1/p
	s/^Vendor ID:\s+([A-Za-z]+)$/\1/p
	/^Model name/ {
		# Strip "APU"/"CPU"/"Processor"
		s/( (APU|CPU|Processor).*)$//
		s/^Model name:\s+(.+)/\1/p
	}
	s/^CPU MHz:\s+([0-9]+).+$/\1/p
	s/^CPU max MHz:\s+([0-9]+).+$/\1/p
') )

cpu_threads="${cpuinfo[1]}"
cpu_coresps="${cpuinfo[2]}"
cpu_sockets="${cpuinfo[3]}"

cpu_cores=$(( $cpu_sockets * $cpu_coresps ))

cpu_vendor="${cpuinfo[4]}"
cpu_model="${cpuinfo[5]}"

cpu_freq_current="${cpuinfo[6]}"
cpu_max_freq="${cpuinfo[7]}"

# Use current F if max F is not available
cpu_freq=${cpu_max_freq:-$cpu_freq_current}

# Format frequency (YYZ -> YYZ MHz / XYYZ -> X.YY Ghz)
if [ ${#cpu_freq} -eq 4 ];
then
	cpu_freq="${cpu_freq:0:1}.${cpu_freq:1:2} GHz"
else
	cpu_freq="${cpu_freq} MHz"
fi


IFS=$_old_IFS


#
# Other
#

case $SHELL in
	*zsh)  shell=$($SHELL --version | sed -E 's/(\(.*\))//');;
	*bash) shell=$($SHELL --version | sed -E '1s/^(GNU [Bb]ash), version ([0-9.]+).*$/\1 \2/; q');;
	*)     shell="Unknown";;
esac


disks_raw=( $(df -Ph --total --local -x tmpfs -x devtmpfs) )
disks_total=${disks_raw[-5]}
disks_used=${disks_raw[-4]}
disks_avail=${disks_raw[-3]}


if [ -e /bin/glxinfo ] || [ -e /usr/bin/glxinfo ]
then
	IFS=$'\n' glxinfo=( $( glxinfo -B | sed -nE "
		s|OpenGL vendor string: (.*)|\1|pg
		s|OpenGL renderer string: ([^/]+).*|\1|pg
	") )

	gpu_vendor="${glxinfo[1]}"
	gpu_device="${glxinfo[2]}"

	# Avoid "Intel Open Source Technology Center"
	case "$gpu_vendor" in
		Intel*)	gpu="Intel $gpu_device";;
		NVIDIA*) gpu="$gpu_vendor $gpu_device";;
		X.Org) gpu="$gpu_device";;  # AMD
		*) gpu="$gpu_vendor $gpu_device";; # Default case
	esac
else
	# Change IFS to match only newlines in lspci
	IFS=$'\n' gpu_all=( $( \
		lspci -mm | sed -nE '/VGA/{ s/(" "| "|" )/|/g; s/"$//p }'
	) )

	# Internal GPU (iGPU)
	IFS=$'|' gpu_int=( $(echo ${gpu_all[1]}) )
	gpu_int="${gpu_int[3]} $(echo "${gpu_int[4]}" | sed -nE 's/\[(.*)\]/\1/p')"

	# External GPU (graphics card)
	IFS=$'|' gpu_ext=( $(echo ${gpu_all[2]}) )
	gpu_ext="${gpu_ext[3]} $(echo "${gpu_ext[4]}" | sed -nE 's/\[(.*)\]/\1/p')"

	# Prefer external gpu
	gpu="${gpu_ext:-gpu_int}"
fi
