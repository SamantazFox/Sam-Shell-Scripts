#!/bin/sh

#
# Force some environment variables
#

_old_IFS=$IFS
_new_IFS="
"

IFS=$_new_IFS
LANG=C


#
# Distro name
#

# Ubuntu / Debian
if [ -e /etc/lsb-release ]; then
	. /etc/lsb-release
	distro="$DISTRIB_ID $DISTRIB_RELEASE $DISTRIB_CODENAME"

# Fedora / CentOS / Arch Linux / Manjaroo
elif [ -e /etc/os-release ]; then
	. /etc/os-release
	distro="${PRETTY_NAME:-$NAME}"

# RedHat
elif [ -e /etc/redhat-release ]; then distro=$(cat /etc/redhat-release)

# Fallback
else
	distro="Linux generic"
fi


#
# Kernel / Memory / CPU details
#

# Kernel version
kernel="$(uname -m) $(uname -sr)"


# Memory informations
get_mem_info()
{
	mem_total_kib=$1
	mem_avail_kib=$2
}

get_mem_info $(sed -nE '
	s/MemTotal:\s+([0-9]+) kB/\1/p
	s/MemAvailable:\s+([0-9]+) kB/\1/p
' /proc/meminfo)

mem_total_mib=$(( $mem_total_kib / 1024 ))
mem_avail_mib=$(( $mem_avail_kib / 1024 ))

mem_used_kib=$(( $mem_total_kib - $mem_avail_kib ))
mem_used_mib=$(( $mem_used_kib / 1024 ))



# CPU informations
get_cpu_info()
{
	cpu_threads=$1
	cpu_coresps=$2
	cpu_sockets=$3
	cpu_vendor=$4
	cpu_model=$5
	cpu_freq_current=$6
	cpu_max_freq=$7
}

get_cpu_info $(lscpu | sed -nE '
	s/^CPU\(s\):\s+([0-9]+)$/\1/p
	s/^Core\(s\) per socket:\s+([0-9]+)$/\1/p
	s/^Socket\(s\):\s+([0-9]+)$/\1/p
	s/^Vendor ID:\s+([A-Za-z]+)$/\1/p
	/^Model name/ {
		# Strip "APU"/"CPU"/"Processor"
		s/( (APU|CPU|Processor).*)$//
		s/^Model name:\s+(.+)/\1/p
	}
	s/^CPU MHz:\s+([0-9]+).+$/\1/p
	s/^CPU max MHz:\s+([0-9]+).+$/\1/p
')


cpu_cores=$(( $cpu_sockets * $cpu_coresps ))

# Use current F if max F is not available
cpu_freq=${cpu_max_freq:-$cpu_freq_current}

# Format frequency (YYZ -> YYZ MHz / XYYZ -> X.YY Ghz)
if [ ${#cpu_freq} -eq 4 ];
then
	cpu_freq_ghz=$(( $cpu_freq / 1000 ))
	cpu_freq_rem=$(( $cpu_freq - ($cpu_freq_ghz*1000) ))
	cpu_freq="${cpu_freq_ghz}.${cpu_freq_rem} GHz"
else
	cpu_freq="${cpu_freq} MHz"
fi


IFS=$_old_IFS


#
# Other
#

case $SHELL in
	*zsh)  shell=$($SHELL --version | sed -E 's/(\(.*\))//');;
	*bash) shell=$($SHELL --version | sed -E '1s/^(GNU [Bb]ash), version ([0-9.]+).*$/\1 \2/; q');;
	*)     shell="Unknown";;
esac


disks_raw=( $(df -Ph --total --local -x tmpfs -x devtmpfs) )
disks_total=${disks_raw[-5]}
disks_used=${disks_raw[-4]}
disks_avail=${disks_raw[-3]}


if [ -e /bin/glxinfo ] || [ -e /usr/bin/glxinfo ]
then

	get_glx_info()
	{
		gpu_vendor=$1
		gpu_device=$2
	}

	IFS=$_new_IFS
	get_glx_info $(glxinfo -B | sed -nE '
		s|OpenGL vendor string: (.*)|\1|pg
		s|OpenGL renderer string: ([^/]+).*|\1|pg
	')


	# Avoid "Intel Open Source Technology Center"
	case "$gpu_vendor" in
		Intel*)	gpu="Intel $gpu_device";;
		NVIDIA*) gpu="$gpu_vendor $gpu_device";;
		X.Org) gpu="$gpu_device";;  # AMD
		*) gpu="$gpu_vendor $gpu_device";; # Default case
	esac

else

	get_gpu_info1()
	{
		gpu_int=$1
		gpu_ext=$2
	}

	get_gpu_info2()
	{
		local gpu_vendor=$3
		case $gpu_vendor in
			*AMD*)
				local gpu_device=$(echo "$4" | sed -nE 's/^.+\[(.*)\]$/\1/p')
				echo "AMD $gpu_device"
				;;
			*) echo "$gpu_vendor $gpu_device";;
		esac
	}

	# Change IFS to match only newlines in lspci
	# TODO: rely on something faster than lspci
	IFS=$_new_IFS
	get_gpu_info1 $(lspci -mm -d ::0300)
	IFS=$_old_IFS

	# Internal GPU = iGPU / External GPU = discrete card
	# Prefer external gpu
	gpu="${gpu_ext:-$gpu_int}"
	gpu=$(eval "get_gpu_info2 $gpu")

fi
