#!/bin/bash
#
# ramdisk
#
# Utility function to create RAM disks (root)
#
# Copyright 2018 (c) Samantaz
#


function ramdisk()
{
	# Check if user is root
	#
	#test $EUID -eq 0 || { echo "This script needs root privileges"; return; }

	# Configuration
	rd_dir="/mnt/ramdisk"
	name="ramdisk"

	# Define lower and upper limits
	# Upper limit is extracted from /proc/meminfo and leaves 256 MiB for the system
	lower=64
	tmp_upper=$(sed -rn 's/^MemAvailable:\s+([0-9]+)\skB$/\1/p' /proc/meminfo)
	upper=$(( ($tmp_upper / 1024) - 256 ))


	# If ramdisk directory does not exist, create it
	if ! [ -d $rd_dir ]; then mkdir $rd_dir; fi


	# Check if ramdisk has already been mounted/created
	if [ -e $rd_dir/.ramdisk_mounted ]; then
		echo "Ramdisk already created and mounted!"

		# Ask for unmounting
		printf "Do you want to unmount \"$name\" at $rd_dir? [y/N] "
		read answer && echo

		if [[ $answer == [yY]* ]]; then
			echo "Unmounting RAM disk"
			rm $rd_dir/.ramdisk_mounted
			sudo umount $rd_dir
		fi
	else

		# Ask user for the ramdisk's size
		printf "Please enter a size in MiB [$lower - $upper]: "
		read answer && echo

		# Make basic boundaries checks before creating the disk
		if test $answer -ge $lower -a $answer -lt $upper
		then
			echo "Creating RAM disk \"$name\""
			echo " -> size = $answer MiB"
			echo " -> path = $rd_dir"

			sudo mount -t tmpfs -o size=${answer}m $name $rd_dir
			touch $rd_dir/.ramdisk_mounted
		else
			echo "The ramdisk's size must be greater than $lower and lower than $upper."
		fi
	fi
}
