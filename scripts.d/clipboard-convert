#!/bin/sh
#
# clipboard-convert
#
# Convert clipboard content to/from base 64.
# This sript is intended for use in addition of barrier, a software that
# permits keyboard, mouse and clipboard sharing across computers.
#
# Barrier doesn't support sharing of binary data in the clipboard, hence these
# two functions. Of course, they're required on every machine, and some
# .desktop files may be added for convenience.
#
# Copyright 2020 (c) Samantaz
#


clip-to-b64()
{
	# Get the mimetype associated to the clipboard content
	# In case of multiple mimetypes, make sure this is not a
	# text string, then take the first one available wich is not text.
	targets=$(xclip -selection clipboard -o -t TARGETS | sed -n -E '
		/^TARGETS$/ { p; n;
			# Check for the multiple mimetypes case
			/^MULTIPLE$/ p; n; /^SAVE_TARGETS$/ { p; n;
				# If text string, quit with code 1
				/^(.*STRING|.*TEXT)$/ q 1
				q # Else quit with no exit code (0)
			}
			q 2  # If nothing found, quit with code 2
		}
	') || return $?

	mimetype=$(xclip -selection clipboard -o -t TARGETS | \
		sed -n -E '/^(application|image)\/[A-Za-z0-9\-_.]+/{p;q}'
	)
	if test -z "$mimetype"; then return 1; fi

	# Get the clipboard's content, gzip it and convert it to base64
	data=$(xclip -selection clipboard -o -t "$mimetype"| gzip -c - | base64 -)
	if test -z "$data"; then return 1; fi

	# Replace clipoard content with its base64 version, preceeded by
	# it's mimetype on a separate line, so it can be restored later
	printf "${mimetype}\n${data}\n" | xclip -selection clipboard -i
}

clip-to-any()
{
	# Get the clipboard's content (in base64) and the associated mimetype
	type=$(xclip -selection clipboard -o | sed -n '1p')
	data=$(xclip -selection clipboard -o | sed '1d')

	# Sanity check
	if test -z "$type" -o -z "$data"; then return 1; fi

	# Restore the content (decoded and gunzip'd) with its proper mimetype
	echo $data | base64 -d - | gunzip -c - | xclip -selection clipboard -i -t $type
}

file-to-clip()
{
	# Only accept files, not directories
	if ! [ -f "$1" ]; then echo "Error: not a file"; return 1; fi

	name=$(basename "$1")
	type=$(file --brief --mime-type "$1")
	size=$(du -sb "$1" | sed -E 's/([0-9]+)\s+.+/\1/')

	# 2MB max size limit
	if [ $size -ge 2000000 ]; then echo "Error: file too large"; return 1; fi
	data=$(gzip -kc "$1" | base64 -)

	sha1sum "$1"
	printf "${type}\n${name}\n${data}\n" | xclip -selection clipboard -i
}

clip-to-file()
{
	# Get the clipboard's content (in base64) and the associated mimetype
	type=$(xclip -selection clipboard -o | sed -n '1p')
	name=$(xclip -selection clipboard -o | sed -n '2p')
	data=$(xclip -selection clipboard -o | sed '1,2d')

	if [ -e "$name" ]; then echo "Error: destination exists"; return 1; fi
	echo $data | base64 -d - | gunzip -c - > "$name"
	sha1sum "$name"
}
